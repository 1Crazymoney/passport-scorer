name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      commit:
        description: "Commit ref"
        required: true
        type: string

jobs:
  test:
    runs-on: ubuntu-latest

    # Run a local ceramic nod to test against
    # services:
    #   ceramic:
    #     image: ceramicnetwork/js-ceramic:2.6.0-rc.1
    #     ports:
    #       - 7007:7007

    # env:
    #  CERAMIC_CLIENT_URL: http://127.0.0.1:7007

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4 
        with:
          python-version: '3.10'

      - name: Install pipenv
        run: pip3 install pipenv

      - name: Generate requirements.txt
        working-directory: ./api
        run: pipenv requirements --dev > requirements.txt

      - name: Install API dependencies
        working-directory: ./api
        run: pip3 install -r requirements.txt

      - name: Run API unittests
        working-directory: ./api
        run: coverage run --source='.' manage.py test

      - name: Python code coverage report
        working-directory: ./api
        run: coverage report --fail-under=70


  build:
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4 
        with:
          python-version: '3.10'

      - name: Declare some variables
        id: vars
        shell: bash
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: passport-scorer
          IMAGE_TAG: ${{ steps.vars.outputs.sha_short }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f iam/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
